% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/isoformFrac.R
\name{isoformFrac}
\alias{isoformFrac}
\title{Generate matrix of isoform fraction data}
\usage{
isoformFrac(dgeObj, dataType = "fpkm", normalize = "tmm")
}
\arguments{
\item{dgeObj}{An isoform level DGEobj created by function initDGEobj().
Counts and isoformData must be present in the DGEobj (Required).
isoformData$ExonLength must be present also.}

\item{dataType}{One of "fpkm" or "tpm" (Default = "fpkm")}

\item{normalize}{Default = "TMM" and invokes TMM normalization. Other allowed
values are: "RLE", "upperquartile", "none". Invokes edgeR::calcNormFactors for
normalization.  Only invoked when dataType = "fpkm".  This is because
applying TPM overrides any prior column scaling.}
}
\value{
An isoform fraction dataframe
}
\description{
Takes a DGEobj as input (transcript level data) and returns a matrix
containing isoform fraction data.
}
\details{
Isoform fraction is calculated using length normalized data (FPKM or TPM).
Length normalized data is required because different isoforms have different
total exon lengths. If FPKM is specified, a normalization can be specified
via edgeR::calcNormFactors.

Isoform fraction is calculated
as the isoform intensity divided by the summed gene intensity for all
isoforms of a given gene.

TPM or FPKM are calculated directly from counts using all data in the DGEobj.
Performing low intensity filtering at the gene level before
running isoformFrac is recommended.
}
\examples{
\dontrun{
   myDGEobj <- isoformFrac(myDGEobj)
}

}
